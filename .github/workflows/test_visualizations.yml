name: Test All Visualizations

on:
  pull_request:

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Discover packages with tests
        id: set-packages
        run: |
          echo "Scanning packages for test scripts and test files..."

          with_tests_and_files=()
          with_test_script_no_files=()
          no_test_script=()
          for dir in packages/*/; do
            pkg=$(basename "$dir")
            if [ -f "$dir/package.json" ]; then
              if jq -e ".scripts.test" "$dir/package.json" > /dev/null 2>&1; then
                if find "$dir" -type f \( -name "*.test.js" -o -name "*.test.ts" -o -name "*.test.jsx" -o -name "*.test.tsx" -o -name "*.spec.js" -o -name "*.spec.ts" -o -name "*.spec.jsx" -o -name "*.spec.tsx" \) -not -path "*/node_modules/*" | grep -q .; then
                  with_tests_and_files+=("$pkg")
                else
                  with_test_script_no_files+=("$pkg")
                fi
              else
                no_test_script+=("$pkg")
              fi
            fi
          done
          packages=$(printf '%s\n' "${with_tests_and_files[@]}" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "packages=$packages" >> $GITHUB_OUTPUT
          
          echo ""
          echo "✅ Packages WITH test script AND test files (${#with_tests_and_files[@]}):"
          printf '  - %s\n' "${with_tests_and_files[@]}"
          echo ""
          echo "⚠️  Packages WITH test script but NO test files (${#with_test_script_no_files[@]}):"
          printf '  - %s\n' "${with_test_script_no_files[@]}"
          echo ""
          echo "❌  Packages WITHOUT test script (${#no_test_script[@]}):"
          printf '  - %s\n' "${no_test_script[@]}"

  test:
    needs: discover
    if: needs.discover.outputs.packages != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.discover.outputs.packages) }}
        exclude:
          - package: jupyterlite
    
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: packages/${{ matrix.package }}/node_modules
          key: ${{ runner.os }}-node-${{ matrix.package }}-${{ hashFiles(format('packages/{0}/package-lock.json', matrix.package)) }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.package }}-

      - name: Install dependencies
        working-directory: packages/${{ matrix.package }}
        run: npm install

      - name: Run tests
        working-directory: packages/${{ matrix.package }}
        run: npm test

  test-jupyterlite:
    needs: discover
    if: contains(fromJson(needs.discover.outputs.packages), 'jupyterlite')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20

      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: packages/jupyterlite/node_modules
          key: ${{ runner.os }}-node-jupyterlite-${{ hashFiles('packages/jupyterlite/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-jupyterlite-

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: pip
          cache-dependency-path: packages/jupyterlite/requirements.txt

      - name: Install Python dependencies
        working-directory: packages/jupyterlite
        run: pip install -r requirements.txt

      - name: Install Node dependencies
        working-directory: packages/jupyterlite
        run: npm install

      - name: Install Playwright browsers
        working-directory: packages/jupyterlite
        run: npx playwright install --with-deps chromium

      - name: Build JupyterLite
        working-directory: packages/jupyterlite
        run: npm run build

      - name: Start dev server in background
        working-directory: packages/jupyterlite
        run: |
          nohup npm run dev > server.log 2>&1 &
          echo $! > server.pid

      - name: Wait for server to be ready
        run: |
          echo "Waiting for server to be ready..."
          for i in {1..60}; do
            if curl -s http://localhost:8000 > /dev/null 2>&1; then
              echo "✅ Server is ready!"
              exit 0
            fi
            echo "Attempt $i/60..."
            sleep 2
          done
          echo "❌ Server failed to start"
          cat packages/jupyterlite/server.log
          exit 1

      - name: Run Playwright tests
        working-directory: packages/jupyterlite
        run: npm test

      - name: Stop dev server
        if: always()
        working-directory: packages/jupyterlite
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi

      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: packages/jupyterlite/playwright-report/
          retention-days: 7

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results
          path: packages/jupyterlite/test-results/
          retention-days: 7

